{"version":3,"sources":["component/Form.js","component/Appointment.js","component/Patients.js","App.js","serviceWorker.js","index.js"],"names":["Form","createAppointment","useState","pet","owner","date","time","symptoms","appointment","setAppointment","error","setError","handleChange","e","target","name","value","className","onSubmit","preventDefault","trim","id","uuid","type","placeholder","onChange","Appointment","deleteAppointment","onClick","Patients","initialAppointments","JSON","parse","localStorage","getItem","allAppointment","setAllAppointment","useEffect","setItem","stringify","newAppointment","filter","item","title","length","appoint","map","key","App","path","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.7e5729e3.chunk.js","sourcesContent":["import React, { Fragment, useState } from 'react'\nimport uuid from 'uuid/v4'\n\nconst Form = ({ createAppointment  }) => {\n\n  const [ appointment, setAppointment  ] = useState({\n      pet: '',\n      owner: '',\n      date: '',\n      time: '',\n      symptoms: ''\n  })\n\n  const [ error, setError ] = useState(false)\n\n  // 1. Función que se ejecuta cada que el usuario escribe en un input \n  const handleChange = (e) => { \n    setAppointment({\n      ...appointment,\n      [e.target.name] : e.target.value\n    })\n  }\n\n  // 2. Extraer los valores\n  const {pet, owner, date, time, symptoms } = appointment;\n\n  // 3. Cuando el usuario agrega el formulario \n  const submitAppointment = (e) => {\n    e.preventDefault()\n\n    // a. Validar (el trim sirve para eliminar los espacios en blanco que ingrese el usuario)\n    if(pet.trim() === '' || owner.trim() === '' || date === '' || time === '' || symptoms === ''){\n      setError(true)\n      // Se agrega el return para que no se siga ejecutando el código ya que hay un error\n      return;\n    }\n\n    // Eliminar el mensaje previo\n    setError(false )\n    \n    // b. Asigmar un id\n    appointment.id = uuid();\n\n    // c. Crear la cita\n    createAppointment(appointment)\n\n    // d. Reiniciar el form\n    setAppointment({\n      pet: '',\n      owner: '',\n      date: '',\n      time: '',\n      symptoms: ''\n    })\n  }\n\n  return ( \n    <Fragment>\n      <h2>Crear Cita</h2>\n      {\n        error \n        ?\n          <p className='alerta-error'>Todos los campos son obligatorios</p>\n        :\n          null\n      }\n      <form\n        onSubmit={submitAppointment}\n      >\n        <label>Nombre mascota </label>\n        <input \n          type='text'\n          name='pet'\n          className='u-full-width'\n          placeholder='Nombre de tu mascota'\n          onChange={handleChange}\n          value={pet}\n        />\n        <label>Nombre dueño </label>\n        <input \n          type='text'\n          name='owner'\n          className='u-full-width'\n          placeholder='Nombre del dueño'\n          onChange={handleChange}\n          value={owner}\n        />\n        <label>Fecha</label>\n        <input \n          type='date'\n          name='date'\n          className='u-full-width'\n          onChange={handleChange}\n          value={date}\n        />\n        <label>Hora</label>\n        <input \n          type='time'\n          name='time'\n          className='u-full-width'\n          onChange={handleChange}\n          value={time}\n        />\n        <label>Síntomas</label>\n        <textarea\n          className='u-full-width'\n          name='symptoms'\n          onChange={handleChange}\n          value={symptoms}\n        >\n        </textarea>\n        <button\n          type='submit'\n          className='u-full-width button-primary'\n        >\n          Agregar CIta\n        </button>\n      </form>\n    </Fragment> \n    );\n}\n \nexport default Form;","import React from 'react'\nimport '../index.css'\n\nconst Appointment = ({ appointment, deleteAppointment }) => {\n  return ( \n    <div className='cita'>\n      <p>Mascota: <span>{appointment.pet}</span> </p>\n      <p>Dueño: <span>{appointment.owner}</span> </p>\n      <p>Fecha: <span>{appointment.date}</span> </p>\n      <p>Hora: <span>{appointment.time}</span> </p>\n      <p>Síntomas: <span>{appointment.symptoms}</span> </p>\n\n      <button\n        className='button eliminar u-full-width'\n        onClick={() => deleteAppointment(appointment.id)}\n      >Eliminar &times;</button>\n    </div>\n   );\n}\n \nexport default Appointment;","import React, { Fragment, useState, useEffect } from 'react'\nimport Form from './Form';\nimport Appointment from './Appointment'\n\nconst Patients = () => {\n  // Citas en localstorage\n  // parse analiza un string como json\n  let initialAppointments = JSON.parse(localStorage.getItem('citas'))\n  if(!initialAppointments){\n    initialAppointments = []\n  }\n\n  // Agregando un estado para citas, esas citas se van a almacenar aquí, en el componente principal\n  const [ allAppointment, setAllAppointment ] = useState(initialAppointments)\n \n  // useEffect parra realizar ciertas operaciones cuándo el state cambia\n  useEffect( () => {\n    let initialAppointments = JSON.parse(localStorage.getItem('citas'))\n\n    if(initialAppointments){\n      //Stringify lo está convirtiendo a un arreglo porque es lo único que soporta localstorage\n      localStorage.setItem('citas', JSON.stringify(allAppointment))\n    }else{\n      localStorage.setItem('citas', JSON.stringify([]))\n    }\n  }, [allAppointment]);      \n\n  // Función que tome las citas actuales y agregué la nueva\n  const createAppointment = (appoint) => { \n    setAllAppointment([\n      ...allAppointment,\n       appoint\n    ])\n  }\n\n  // Función que elimina una cita por su id\n  const deleteAppointment = (id) => {\n    const newAppointment = allAppointment.filter(item =>  item.id !== id);\n    setAllAppointment(newAppointment)\n  }\n\n  // Mensaje condicional\n  const title = allAppointment.length === 0 ? 'No hay citas' : 'Administra tus citas' \n  \n\n  return ( \n    <Fragment>\n      <h1>Administrador de Pacientes</h1>\n      <div className='container'>\n        <div className='row'>\n          <div className='one-half column'>\n            <Form \n              createAppointment={createAppointment}\n            />\n          </div>\n          <div className='one-half column'>\n            <h2>{title}</h2>\n            {allAppointment.map(item => (\n              <Appointment \n                key={item.id}\n                appointment={item}\n                deleteAppointment={deleteAppointment}\n              />\n              ))}\n          </div>\n        </div>\n      </div>\n    </Fragment>\n   );\n}\n \nexport default Patients;","import React from 'react';\nimport { BrowserRouter, Route } from \"react-router-dom\";\nimport Patients from './component/Patients';\n\nimport './index.css';\n\n\nfunction App() {\n  return (\n    <BrowserRouter>\n      <Route path='/' component={Patients} />\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}